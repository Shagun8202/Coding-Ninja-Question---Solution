/************************************************************

    Following is the linked list node structure

    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/
#include<queue>
class compare{
    public:
    bool operator()(Node<int>* a,Node<int>* b){
        return a->data > b->data;
    }
};
Node<int>* mergeKLists(vector<Node<int>*> &listArray)
{ 
 priority_queue<Node<int>*,vector<Node<int>*> ,compare > q;
 int size = listArray.size();
 if(size==0){ 
     return NULL;
 }
 for(int i = 0;i<size;i++){
     if(listArray[i]!= NULL){
         q.push(listArray[i]);
     }
  }
    Node<int>* head = NULL;
    Node<int>* tail = NULL;
    while(q.size()>0){
        Node<int>* top  = q.top();
        q.pop();
         if(top->next !=NULL){
                q.push(top->next);
         }
        if(head==NULL){
            head = top;
            tail = top;
           
        }
        else{
            tail->next = top;
            tail = top;
     }
    }
 return head;
    
}
