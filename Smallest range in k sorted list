#include<queue>
#include<limits.h>
class node{
    public:
    int data;
    int row;
    int col;
    node(int a,int b ,int c){
        data = a;
        row = b;
        col = c;
    }
};
class compare{
    public:
    bool operator()(node* a, node* b){
        return a->data > b->data;
    }
};
int kSorted(vector<vector<int>> &a, int k, int n) {
    priority_queue<node*, vector<node*>,compare> q;
    int mini = INT_MAX;
    int maxi = INT_MIN;
    for(int i = 0;i<k;i++){
        int element = a[i][0];
        mini = min(mini,element);
        maxi = max(maxi,element);
        q.push(new node(element,i,0));
    }
        int start = mini;
        int end = maxi;
    while(!q.empty()){
        node* temp = q.top();
        q.pop();
        mini = temp->data;
        if(maxi-mini < end- start){
            start = mini;
            end = maxi;
        }
       if(temp->col + 1 < n){
          maxi = max(maxi,a[temp->row][temp->col+1]); 
           q.push(new node(a[temp->row][temp->col+1],temp->row,temp->col+1));
       }
        else{
            break;
        }
    }
        
    return (end-start +1);    
        
        
}
